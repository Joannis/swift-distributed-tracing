{"Structs/NoOpInstrument.html#/s:15Instrumentation14NoOpInstrumentVACycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"NoOpInstrument"},"Structs/NoOpInstrument.html#/s:15Instrumentation10InstrumentP6inject_4into5usingy11CoreBaggage0G0V_qd__zqd_0_t7CarrierQyd_0_Rsd__AA8InjectorRd_0_r0_lF":{"name":"inject(_:into:using:)","parent_name":"NoOpInstrument"},"Structs/NoOpInstrument.html#/s:15Instrumentation10InstrumentP7extract_4into5usingyqd___11CoreBaggage0G0Vzqd_0_t7CarrierQyd_0_Rsd__AA9ExtractorRd_0_r0_lF":{"name":"extract(_:into:using:)","parent_name":"NoOpInstrument"},"Structs/MultiplexInstrument.html#/s:15Instrumentation19MultiplexInstrumentVyACSayAA0C0_pGcfc":{"name":"init(_:)","abstract":"<p>Create a <code>MultiplexInstrument</code>.</p>","parent_name":"MultiplexInstrument"},"Structs/MultiplexInstrument.html#/s:15Instrumentation10InstrumentP6inject_4into5usingy11CoreBaggage0G0V_qd__zqd_0_t7CarrierQyd_0_Rsd__AA8InjectorRd_0_r0_lF":{"name":"inject(_:into:using:)","parent_name":"MultiplexInstrument"},"Structs/MultiplexInstrument.html#/s:15Instrumentation10InstrumentP7extract_4into5usingyqd___11CoreBaggage0G0Vzqd_0_t7CarrierQyd_0_Rsd__AA9ExtractorRd_0_r0_lF":{"name":"extract(_:into:using:)","parent_name":"MultiplexInstrument"},"Structs/MultiplexInstrument.html":{"name":"MultiplexInstrument","abstract":"<p>A pseudo-<code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Instrument.html\">Instrument</a></code> that may be used to instrument using multiple other <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Instrument.html\">Instrument</a></code>s across a"},"Structs/NoOpInstrument.html":{"name":"NoOpInstrument","abstract":"<p>A &ldquo;no op&rdquo; implementation of an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Instrument.html\">Instrument</a></code>.</p>"},"Protocols/Instrument.html#/s:15Instrumentation10InstrumentP7extract_4into5usingyqd___11CoreBaggage0G0Vzqd_0_t7CarrierQyd_0_Rsd__AA9ExtractorRd_0_r0_lF":{"name":"extract(_:into:using:)","abstract":"<p>Extract values from a <code>Carrier</code> by using the given extractor and inject them into the given <code>BaggageContext</code>.","parent_name":"Instrument"},"Protocols/Instrument.html#/s:15Instrumentation10InstrumentP6inject_4into5usingy11CoreBaggage0G0V_qd__zqd_0_t7CarrierQyd_0_Rsd__AA8InjectorRd_0_r0_lF":{"name":"inject(_:into:using:)","abstract":"<p>Inject values from a <code>BaggageContext</code> and inject them into the given <code>Carrier</code> using the given <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Injector.html\">Injector</a></code>.</p>","parent_name":"Instrument"},"Protocols/Injector.html#/s:15Instrumentation8InjectorP7CarrierQa":{"name":"Carrier","abstract":"<p>The carrier to inject values into.</p>","parent_name":"Injector"},"Protocols/Injector.html#/s:15Instrumentation8InjectorP6inject_6forKey4intoySS_SS7CarrierQzztF":{"name":"inject(_:forKey:into:)","abstract":"<p>Inject the given value for the given key into the given <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Injector.html#/s:15Instrumentation8InjectorP7CarrierQa\">Carrier</a></code>.</p>","parent_name":"Injector"},"Protocols/Extractor.html#/s:15Instrumentation9ExtractorP7CarrierQa":{"name":"Carrier","abstract":"<p>The carrier to extract values from.</p>","parent_name":"Extractor"},"Protocols/Extractor.html#/s:15Instrumentation9ExtractorP7extract3key4fromSSSgSS_7CarrierQztF":{"name":"extract(key:from:)","abstract":"<p>Extract the value for the given key from the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Extractor.html#/s:15Instrumentation9ExtractorP7CarrierQa\">Carrier</a></code>.</p>","parent_name":"Extractor"},"Protocols/Extractor.html":{"name":"Extractor","abstract":"<p>Conforming types are used to extract values from a specific <code>Carrier</code>.</p>"},"Protocols/Injector.html":{"name":"Injector","abstract":"<p>Conforming types are used to inject values into a specific <code>Carrier</code>.</p>"},"Protocols/Instrument.html":{"name":"Instrument","abstract":"<p>Conforming types are usually cross-cutting tools like tracers. They are agnostic of what specific <code>Carrier</code> is used"},"Enums/InstrumentationSystem.html#/s:15Instrumentation0A6SystemO9bootstrapyyAA10Instrument_pFZ":{"name":"bootstrap(_:)","abstract":"<p>Globally select the desired <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Instrument.html\">Instrument</a></code> implementation.</p>","parent_name":"InstrumentationSystem"},"Enums/InstrumentationSystem.html#/s:15Instrumentation0A6SystemO10instrumentAA10Instrument_pvpZ":{"name":"instrument","abstract":"<p>Returns the globally configured <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Instrument.html\">Instrument</a></code>.</p>","parent_name":"InstrumentationSystem"},"Enums/InstrumentationSystem.html":{"name":"InstrumentationSystem","abstract":"<p><code>InstrumentationSystem</code> is a global facility where the default cross-cutting tool can be configured."},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}